#include "battle_city.h"
#include "map.h"
#include "xparameters.h"
#include "xil_io.h"
#include "xio.h"
#include <math.h>
#include <stdlib.h>

/*
 * GENERATED BY BC_MEM_PACKER
 * DATE: Wed Jul 08 21:00:48 2015
 */

// ***** 16x16 IMAGES *****
#define IMG_16x16_acursor			0x00FF
#define IMG_16x16_bg00			0x013F
#define IMG_16x16_bg01			0x017F
#define IMG_16x16_bg02			0x01BF
#define IMG_16x16_bg10			0x01FF
#define IMG_16x16_bg11			0x023F
#define IMG_16x16_bg12			0x027F
#define IMG_16x16_bg20			0x02BF
#define IMG_16x16_bg21			0x02FF
#define IMG_16x16_bg22			0x033F
#define IMG_16x16_bg30			0x037F
#define IMG_16x16_bg31			0x03BF
#define IMG_16x16_bg32			0x03FF
#define IMG_16x16_bg40			0x043F
#define IMG_16x16_bg41			0x047F
#define IMG_16x16_bg42			0x04BF
#define IMG_16x16_bg50			0x04FF
#define IMG_16x16_bg51			0x053F
#define IMG_16x16_bg52			0x057F
#define IMG_16x16_pl00			0x05BF
#define IMG_16x16_pl01			0x05FF
#define IMG_16x16_pl10			0x063F
#define IMG_16x16_pl11			0x067F
#define IMG_16x16_pr00			0x06BF
#define IMG_16x16_pr01			0x06FF
#define IMG_16x16_pr10			0x073F
#define IMG_16x16_pr11			0x077F
#define IMG_16x16_sky			0x07BF

#define IMG_16x16_cigle			0x00FF //2
#define IMG_16x16_coin			0x013F //5
#define IMG_16x16_crno			0x07BF //0
#define IMG_16x16_enemi1		0x057F //4
#define IMG_16x16_mario			0x06FF //1
#define IMG_16x16_plavacigla	0x023F //3
/*
 // ***** 16x16 IMAGES *****
 #define IMG_16x16_cigle			0x00FF //2
 #define IMG_16x16_coin			0x013F //5
 #define IMG_16x16_crno			0x017F //0
 #define IMG_16x16_enemi1		0x01BF //4
 #define IMG_16x16_mario			0x01FF //1
 #define IMG_16x16_plavacigla	0x023F //3
 */
// ***** MAP *****
#define MAP_BASE_ADDRESS			2047 // MAP_OFFSET in battle_city.vhd
#define MAP_X							0
#define MAP_X2							640
#define MAP_Y							4
#define MAP_W							64
#define MAP_H							56

#define REGS_BASE_ADDRESS               ( MAP_BASE_ADDRESS + MAP_WIDTH * MAP_HEIGHT )
//#define REGS_BASE_ADDRESS               (6639)

#define BTN_DOWN( b )                   ( !( b & 0x01 ) )
#define BTN_UP( b )                     ( !( b & 0x10 ) )
#define BTN_LEFT( b )                   ( !( b & 0x02 ) )
#define BTN_RIGHT( b )                  ( !( b & 0x08 ) )
#define BTN_SHOOT( b )                  ( !( b & 0x04 ) )

#define TANK1_REG_L                     8
#define TANK1_REG_H                     9
#define TANK_AI_REG_L                   4
#define TANK_AI_REG_H                   5
#define TANK_AI_REG_L2                  6
#define TANK_AI_REG_H2                  7
#define TANK_AI_REG_L3                  2
#define TANK_AI_REG_H3                  3
#define TANK_AI_REG_L4                  10
#define TANK_AI_REG_H4                  11
#define TANK_AI_REG_L5                  12
#define TANK_AI_REG_H5                  13
#define TANK_AI_REG_L6                  14
#define TANK_AI_REG_H6                  15
#define TANK_AI_REG_L7                  16
#define TANK_AI_REG_H7                  17
#define BASE_REG_L						0
#define BASE_REG_H	                    1

int lives = 3;
int score = 0;
int mapPart = 1;
int udario_glavom_skok = 0;
int map_move = 0;
int brojac = 0;
int udario_u_blok = 0;
int direction = 0;
unsigned int buttons;
int broj_promasaja = 0;
unsigned int bool_promasaj = 0;

typedef enum {
	b_false, b_true
} bool_t;

typedef enum {
	DIR_LEFT, DIR_RIGHT, DIR_UP, DIR_DOWN, DIR_STILL
} direction_t;

typedef struct {
	unsigned int x;
	unsigned int y;
	direction_t dir;
	unsigned int type;

	bool_t destroyed;

	unsigned int reg_l;
	unsigned int reg_h;
} characters;

characters cursor = { 300,						// x
		200,						// y
		DIR_LEFT,              		// dir
		IMG_16x16_acursor,  		// type

		b_false,                		// destroyed

		TANK_AI_REG_L5,            		// reg_l
		TANK_AI_REG_H5             		// reg_h
		};

characters duck1_right = { 160,	                        // x
		131, 		                     // y
		DIR_RIGHT,              		// dir
		IMG_16x16_pr00,  			// type

		b_false,                		// destroyed

		TANK1_REG_L,            		// reg_l
		TANK1_REG_H             		// reg_h
		};

characters duck2_right = { 176,	                        // x
		131, 		                     // y
		DIR_RIGHT,              		// dir
		IMG_16x16_pr01,  			// type

		b_false,                		// destroyed

		TANK_AI_REG_L2,            		// reg_l
		TANK_AI_REG_H2             		// reg_h
		};

characters duck3_right = { 160,	                        // x
		147, 		                     // y
		DIR_RIGHT,              		// dir
		IMG_16x16_pr10,  			// type

		b_false,                		// destroyed

		TANK_AI_REG_L3,            		// reg_l
		TANK_AI_REG_H3             		// reg_h
		};

characters duck4_right = { 176,	                        // x
		147, 		                     // y
		DIR_RIGHT,              		// dir
		IMG_16x16_pr11,  			// type

		b_false,                		// destroyed

		TANK_AI_REG_L4,            		// reg_l
		TANK_AI_REG_H4             		// reg_h
		};

characters duck1_left = { 160,	                        // x
		131, 		                     // y
		DIR_RIGHT,              		// dir
		IMG_16x16_pl00,  			// type

		b_false,                		// destroyed

		TANK1_REG_L,            		// reg_l
		TANK1_REG_H             		// reg_h
		};

characters duck2_left = { 176,	                        // x
		131, 		                     // y
		DIR_RIGHT,              		// dir
		IMG_16x16_pl01,  			// type

		b_false,                		// destroyed

		TANK_AI_REG_L2,            		// reg_l
		TANK_AI_REG_H2             		// reg_h
		};

characters duck3_left = { 160,	                        // x
		147, 		                     // y
		DIR_RIGHT,              		// dir
		IMG_16x16_pl10,  			// type

		b_false,                		// destroyed

		TANK_AI_REG_L3,            		// reg_l
		TANK_AI_REG_H3             		// reg_h
		};

characters duck4_left = { 176,	                        // x
		147, 		                     // y
		DIR_RIGHT,              		// dir
		IMG_16x16_pl11,  			// type

		b_false,                		// destroyed

		TANK_AI_REG_L4,            		// reg_l
		TANK_AI_REG_H4             		// reg_h
		};

characters mario = { 60,	                        // x
		431, 		                     // y
		DIR_RIGHT,              		// dir
		IMG_16x16_mario,  			// type

		b_false,                		// destroyed

		TANK_AI_REG_L7,            		// reg_l
		TANK_AI_REG_H7             		// reg_h
		};
/*
 characters enemie1 = { 331,						// x
 431,						// y
 DIR_LEFT,              		// dir
 IMG_16x16_enemi1,  		// type

 b_false,                		// destroyed

 TANK_AI_REG_L,            		// reg_l
 TANK_AI_REG_H             		// reg_h
 };

 characters enemie2 = { 450,						// x
 431,						// y
 DIR_LEFT,              		// dir
 IMG_16x16_enemi1,  		// type

 b_false,                		// destroyed

 TANK_AI_REG_L2,            		// reg_l
 TANK_AI_REG_H2             		// reg_h
 };

 characters enemie3 = { 330,						// x
 272,						// y
 DIR_LEFT,              		// dir
 IMG_16x16_enemi1,  		// type

 b_false,                		// destroyed

 TANK_AI_REG_L3,            		// reg_l
 TANK_AI_REG_H3             		// reg_h
 };

 characters enemie4 = { 635,						// x
 431,						// y
 DIR_LEFT,              		// dir
 IMG_16x16_enemi1,  		// type

 b_false,                		// destroyed

 TANK_AI_REG_L4,            		// reg_l
 TANK_AI_REG_H4             		// reg_h
 };
 */

unsigned int rand_lfsr113(void) {
	static unsigned int z1 = 12345, z2 = 12345;
	unsigned int b;

	b = ((z1 << 6) ^ z1) >> 13;
	z1 = ((z1 & 4294967294U) << 18) ^ b;
	b = ((z2 << 2) ^ z2) >> 27;
	z2 = ((z2 & 4294967288U) << 2) ^ b;

	return (z1 ^ z2);
}

static void chhar_spawn(characters * chhar) {
	Xil_Out32(
			XPAR_BATTLE_CITY_PERIPH_0_BASEADDR + 4 * ( REGS_BASE_ADDRESS + chhar->reg_l ),
			(unsigned int )0x8F000000 | (unsigned int )chhar->type);
	Xil_Out32(
			XPAR_BATTLE_CITY_PERIPH_0_BASEADDR + 4 * ( REGS_BASE_ADDRESS + chhar->reg_h ),
			(chhar->y << 16) | chhar->x);

}

static void chhar_spawn_duck(characters *duck1, characters *duck2,
		characters *duck3, characters *duck4) {
	Xil_Out32(
			XPAR_BATTLE_CITY_PERIPH_0_BASEADDR + 4 * ( REGS_BASE_ADDRESS + duck1->reg_l ),
			(unsigned int )0x8F000000 | (unsigned int )duck1->type);
	Xil_Out32(
			XPAR_BATTLE_CITY_PERIPH_0_BASEADDR + 4 * ( REGS_BASE_ADDRESS + duck2->reg_l ),
			(unsigned int )0x8F000000 | (unsigned int )duck2->type);
	Xil_Out32(
			XPAR_BATTLE_CITY_PERIPH_0_BASEADDR + 4 * ( REGS_BASE_ADDRESS + duck3->reg_l ),
			(unsigned int )0x8F000000 | (unsigned int )duck3->type);
	Xil_Out32(
			XPAR_BATTLE_CITY_PERIPH_0_BASEADDR + 4 * ( REGS_BASE_ADDRESS + duck4->reg_l ),
			(unsigned int )0x8F000000 | (unsigned int )duck4->type);
	Xil_Out32(
			XPAR_BATTLE_CITY_PERIPH_0_BASEADDR + 4 * ( REGS_BASE_ADDRESS + duck1->reg_h ),
			(duck1->y << 16) | duck1->x);
	Xil_Out32(
			XPAR_BATTLE_CITY_PERIPH_0_BASEADDR + 4 * ( REGS_BASE_ADDRESS + duck2->reg_h ),
			(duck2->y << 16) | duck2->x);
	Xil_Out32(
			XPAR_BATTLE_CITY_PERIPH_0_BASEADDR + 4 * ( REGS_BASE_ADDRESS + duck3->reg_h ),
			(duck3->y << 16) | duck3->x);
	Xil_Out32(
			XPAR_BATTLE_CITY_PERIPH_0_BASEADDR + 4 * ( REGS_BASE_ADDRESS + duck4->reg_h ),
			(duck4->y << 16) | duck4->x);
}

static void map_update(characters * mario) {
	int x, y;
	long int addr;

	for (y = 0; y < MAP_HEIGHT; y++) {
		for (x = 0; x < MAP_WIDTH; x++) {
			addr = XPAR_BATTLE_CITY_PERIPH_0_BASEADDR
					+ 4 * (MAP_BASE_ADDRESS + y * MAP_WIDTH + x);
			switch (map1[y][x + map_move]) {
			case 0:
				Xil_Out32(addr, IMG_16x16_sky);
				break;
			case 1:
				Xil_Out32(addr, IMG_16x16_acursor);
				break;
			case 2:
				Xil_Out32(addr, IMG_16x16_pr00);
				break;
			case 3:
				Xil_Out32(addr, IMG_16x16_pr01);
				break;
			case 4:
				Xil_Out32(addr, IMG_16x16_pr10);
				break;
			case 5:
				Xil_Out32(addr, IMG_16x16_pr11);
				break;
			case 6:
				Xil_Out32(addr, IMG_16x16_pl00);
				break;
			case 7:
				Xil_Out32(addr, IMG_16x16_pl01);
				break;
			case 8:
				Xil_Out32(addr, IMG_16x16_pl10);
				break;
			case 9:
				Xil_Out32(addr, IMG_16x16_pl11);
				break;
			case 10:
				Xil_Out32(addr, IMG_16x16_pr10);
				break;
			case 11:
				Xil_Out32(addr, IMG_16x16_pr11);
				break;
			case 12:
				Xil_Out32(addr, IMG_16x16_bg00);
				break;
			case 13:
				Xil_Out32(addr, IMG_16x16_bg01);
				break;
			case 14:
				Xil_Out32(addr, IMG_16x16_bg02);
				break;
			case 15:
				Xil_Out32(addr, IMG_16x16_bg10);
				break;
			case 16:
				Xil_Out32(addr, IMG_16x16_bg11);
				break;
			case 17:
				Xil_Out32(addr, IMG_16x16_bg12);
				break;
			case 18:
				Xil_Out32(addr, IMG_16x16_bg20);
				break;
			case 19:
				Xil_Out32(addr, IMG_16x16_bg21);
				break;
			case 20:
				Xil_Out32(addr, IMG_16x16_bg22);
				break;
			case 21:
				Xil_Out32(addr, IMG_16x16_bg30);
				break;
			case 22:
				Xil_Out32(addr, IMG_16x16_bg31);
				break;
			case 23:
				Xil_Out32(addr, IMG_16x16_bg32);
				break;
			case 24:
				Xil_Out32(addr, IMG_16x16_bg40);
				break;
			case 25:
				Xil_Out32(addr, IMG_16x16_bg41);
				break;
			case 26:
				Xil_Out32(addr, IMG_16x16_bg42);
				break;
			case 27:
				Xil_Out32(addr, IMG_16x16_bg50);
				break;
			case 28:
				Xil_Out32(addr, IMG_16x16_bg51);
				break;
			case 29:
				Xil_Out32(addr, IMG_16x16_bg52);
				break;
			default:
				Xil_Out32(addr, IMG_16x16_sky);
				break;
			}
		}
	}
}

static void map_reset(unsigned char * map) {

	unsigned int i;

	for (i = 0; i <= 20; i += 2) {
		Xil_Out32(
				XPAR_BATTLE_CITY_PERIPH_0_BASEADDR + 4 * ( REGS_BASE_ADDRESS + i ),
				(unsigned int )0x0F000000);
	}

}

int random_direction() {
	int number;

	/*if (duck2_right.x > 600) {
	 if (duck2_right.y < 16) {
	 number = rand() % 8;
	 while (number != 6 || number != 3 || number != 5) {
	 number = rand() % 8;
	 }
	 } else if (duck2_right.y > 330) {
	 number = rand() % 8;
	 while (number != 0 || number != 3 || number != 1) {
	 number = rand() % 8;
	 }
	 } else {
	 number = rand() % 8;
	 while (number == 2 || number == 4 || number == 7) {
	 number = rand() % 8;
	 }
	 }
	 } else if (duck2_right.x < 16) {
	 if (duck2_right.y < 16) {
	 number = rand() % 8;
	 while (number != 6 || number != 4 || number != 7) {
	 number = rand() % 8;
	 }
	 } else if (duck2_right.y > 330) {
	 number = rand() % 8;
	 while (number != 2 || number != 4 || number != 1) {
	 number = rand() % 8;
	 }
	 } else {
	 number = rand() % 8;
	 while (number == 0 || number == 3 || number == 5) {
	 number = rand() % 8;
	 }
	 }
	 } else if (duck2_right.y < 200) {
	 number = rand() % 8;
	 while (number == 0 || number == 1 || number == 2) {
	 number = rand() % 8;
	 }
	 } else if (duck2_right.y > 330) {
	 number = rand() % 8;
	 while (number == 5 || number == 6 || number == 7) {
	 number = rand() % 8;
	 }
	 } else {
	 number = rand() % 8;
	 }*/
	number = rand() % 8;
	return number;
}

int random() {
	int number;
	number = rand() % 150 + 50;
	return number;
}

static void chhar_spawn_duck_move(characters *duck1, characters *duck2,
		characters *duck3, characters *duck4) {

	Xil_Out32(
			XPAR_BATTLE_CITY_PERIPH_0_BASEADDR + 4 * ( REGS_BASE_ADDRESS + duck1->reg_h ),
			(duck1->y << 16) | duck1->x);
	Xil_Out32(
			XPAR_BATTLE_CITY_PERIPH_0_BASEADDR + 4 * ( REGS_BASE_ADDRESS + duck2->reg_h ),
			(duck2->y << 16) | duck2->x);
	Xil_Out32(
			XPAR_BATTLE_CITY_PERIPH_0_BASEADDR + 4 * ( REGS_BASE_ADDRESS + duck3->reg_h ),
			(duck3->y << 16) | duck3->x);
	Xil_Out32(
			XPAR_BATTLE_CITY_PERIPH_0_BASEADDR + 4 * ( REGS_BASE_ADDRESS + duck4->reg_h ),
			(duck4->y << 16) | duck4->x);
}

static void cursor_move() {
	buttons = XIo_In32( XPAR_IO_PERIPH_BASEADDR );
	direction_t d = DIR_STILL;
	if (BTN_LEFT(buttons)) {
		d = DIR_LEFT;
	} else if (BTN_RIGHT(buttons)) {
		d = DIR_RIGHT;
	} else if (BTN_UP(buttons)) {
		d = DIR_UP;
	} else if (BTN_DOWN(buttons)) {
		d = DIR_DOWN;
	}

	switch (d) {
	case DIR_DOWN:
		cursor.y += 2;
		break;
	case DIR_UP:
		cursor.y -= 2;
		break;
	case DIR_LEFT:
		cursor.x -= 2;
		break;
	case DIR_RIGHT:
		cursor.x += 2;
		break;
	case DIR_STILL:
		cursor.x = cursor.x;
		cursor.y = cursor.y;
		break;
	default:
		cursor.x = cursor.x;
		cursor.y = cursor.y;
	}
	chhar_spawn(&cursor);
}
/*
 bool_t crash_detection() {
 buttons = XIo_In32( XPAR_IO_PERIPH_BASEADDR );
 if (BTN_SHOOT(buttons)) {
 if (cursor.x > duck1_left.x && cursor.x < (duck1_left.x + 16)
 && cursor.y > duck1_left.y && cursor.y < (duck1_left.y + 16)) {
 return b_true;
 } else {
 return b_false;
 }
 }
 return b_false;
 }
 */
unsigned int crash_detection() {
	buttons = XIo_In32( XPAR_IO_PERIPH_BASEADDR );
	if (BTN_SHOOT(buttons)) {
		if (cursor.x > duck1_left.x && cursor.x < (duck1_left.x + 16)
				&& cursor.y > duck1_left.y && cursor.y < (duck1_left.y + 16)) {
			return 1;
		} else {
			return 2;
		}
	}
	return 0;
}

int random_x() {
	return rand() % 600;
}

void reset_duck() {
	duck1_left.y = 320;
	duck2_left.y = 320;
	duck3_left.y = 336;
	duck4_left.y = 336;
	duck1_left.x = random_x();
	duck2_left.x = duck1_left.x + 16;
	duck3_left.x = duck1_left.x;
	duck4_left.x = duck1_left.x + 16;

	duck1_right.y = 320;
	duck2_right.y = 320;
	duck3_right.y = 336;
	duck4_right.y = 336;
	duck1_right.x = duck1_left.x;
	duck2_right.x = duck1_left.x + 16;
	duck3_right.x = duck1_left.x;
	duck4_right.x = duck1_left.x + 16;
}
/*
 static void duck_move() {
 int i, j;
 unsigned int y;

 direction = random_direction();

 if (direction == 0) {

 y = random();
 for (i = 0; i < y; i++) {
 duck1_left.y -= 1;
 duck2_left.y -= 1;
 duck3_left.y -= 1;
 duck4_left.y -= 1;
 duck1_left.x -= 1;
 duck2_left.x -= 1;
 duck3_left.x -= 1;
 duck4_left.x -= 1;

 duck1_right.y -= 1;
 duck2_right.y -= 1;
 duck3_right.y -= 1;
 duck4_right.y -= 1;
 duck1_right.x -= 1;
 duck2_right.x -= 1;
 duck3_right.x -= 1;
 duck4_right.x -= 1;
 cursor_move();
 chhar_spawn_duck(&duck1_left, &duck2_left, &duck3_left,
 &duck4_left);
 if (crash_detection() == b_true) {
 lives--;
 for (j = 0; j < 10000000; j++) {
 }
 if (lives < 1) {
 while (1);
 }
 reset_duck();
 }

 for (j = 0; j < 100000; j++) {
 }
 if (duck1_left.x < 10 || duck1_left.y < 10) {
 return;
 }

 }

 } else if (direction == 1) {
 y = random();
 for (i = 0; i < y; i++) {
 duck1_left.y -= 1;
 duck2_left.y -= 1;
 duck3_left.y -= 1;
 duck4_left.y -= 1;
 duck1_right.y -= 1;
 duck2_right.y -= 1;
 duck3_right.y -= 1;
 duck4_right.y -= 1;
 chhar_spawn_duck(&duck1_left, &duck2_left, &duck3_left,
 &duck4_left);
 cursor_move();
 if (crash_detection() == b_true) {
 lives--;
 for (j = 0; j < 10000000; j++) {
 }
 if (lives < 1) {
 while (1)
 ;
 }
 reset_duck();
 }
 for (j = 0; j < 100000; j++) {
 }
 if (duck1_left.y < 10) {
 return;
 }

 }

 } else if (direction == 2) {

 y = random();
 for (i = 0; i < y; i++) {
 duck1_left.y -= 1;
 duck2_left.y -= 1;
 duck3_left.y -= 1;
 duck4_left.y -= 1;
 duck1_right.y -= 1;
 duck2_right.y -= 1;
 duck3_right.y -= 1;
 duck4_right.y -= 1;

 duck1_left.x += 1;
 duck2_left.x += 1;
 duck3_left.x += 1;
 duck4_left.x += 1;
 duck1_right.x += 1;
 duck2_right.x += 1;
 duck3_right.x += 1;
 duck4_right.x += 1;
 chhar_spawn_duck(&duck1_right, &duck2_right, &duck3_right,
 &duck4_right);
 cursor_move();
 if (crash_detection() == b_true) {
 lives--;
 for (j = 0; j < 10000000; j++) {
 }
 if (lives < 1) {
 while (1)
 ;
 }
 reset_duck();
 }
 for (j = 0; j < 100000; j++) {
 }
 if (duck1_right.x > 600 || duck1_right.y < 10) {
 return;
 }

 }

 } else if (direction == 3) {
 y = random();
 for (i = 0; i < y; i++) {
 duck1_right.x -= 1;
 duck2_right.x -= 1;
 duck3_right.x -= 1;
 duck4_right.x -= 1;
 duck1_left.x -= 1;
 duck2_left.x -= 1;
 duck3_left.x -= 1;
 duck4_left.x -= 1;

 chhar_spawn_duck(&duck1_left, &duck2_left, &duck3_left,
 &duck4_left);
 cursor_move();
 if (crash_detection() == b_true) {
 lives--;
 for (j = 0; j < 10000000; j++) {
 }
 if (lives < 1) {
 while (1)
 ;
 }
 reset_duck();
 }
 for (j = 0; j < 100000; j++) {
 }
 if (duck1_left.x < 10) {
 return;
 }

 }

 } else if (direction == 4) {
 y = random();
 for (i = 0; i < y; i++) {
 duck1_left.x += 1;
 duck2_left.x += 1;
 duck3_left.x += 1;
 duck4_left.x += 1;
 duck1_right.x += 1;
 duck2_right.x += 1;
 duck3_right.x += 1;
 duck4_right.x += 1;

 chhar_spawn_duck(&duck1_right, &duck2_right, &duck3_right,
 &duck4_right);
 cursor_move();
 if (crash_detection() == b_true) {
 lives--;
 for (j = 0; j < 10000000; j++) {
 }
 if (lives < 1) {
 while (1)
 ;
 }
 reset_duck();
 }
 for (j = 0; j < 100000; j++) {
 }

 if (duck1_right.x > 600) {
 return;
 }
 }

 } else if (direction == 5) {

 y = random();
 for (i = 0; i < y; i++) {
 duck1_right.x -= 1;
 duck2_right.x -= 1;
 duck3_right.x -= 1;
 duck4_right.x -= 1;
 duck1_left.x -= 1;
 duck2_left.x -= 1;
 duck3_left.x -= 1;
 duck4_left.x -= 1;
 duck1_left.y += 1;
 duck2_left.y += 1;
 duck3_left.y += 1;
 duck4_left.y += 1;
 duck1_right.y += 1;
 duck2_right.y += 1;
 duck3_right.y += 1;
 duck4_right.y += 1;

 chhar_spawn_duck(&duck1_left, &duck2_left, &duck3_left,
 &duck4_left);
 cursor_move();
 if (crash_detection() == b_true) {
 lives--;
 for (j = 0; j < 10000000; j++) {
 }
 if (lives < 1) {
 while (1)
 ;
 }
 reset_duck();
 }
 for (j = 0; j < 100000; j++) {
 }
 if (duck1_right.x < 10 || duck1_right.y > 320) {
 return;
 }

 }

 } else if (direction == 6) {
 y = random();

 for (i = 0; i < y; i++) {
 duck1_left.y += 1;
 duck2_left.y += 1;
 duck3_left.y += 1;
 duck4_left.y += 1;
 duck1_right.y += 1;
 duck2_right.y += 1;
 duck3_right.y += 1;
 duck4_right.y += 1;

 chhar_spawn_duck(&duck1_left, &duck2_left, &duck3_left,
 &duck4_left);
 cursor_move();
 if (crash_detection() == b_true) {
 lives--;
 for (j = 0; j < 10000000; j++) {
 }
 if (lives < 1) {
 while (1)
 ;
 }
 reset_duck();
 }
 for (j = 0; j < 100000; j++) {
 }
 if (duck1_right.y > 320) {
 return;
 }

 }

 } else if (direction == 7) {

 y = random();
 for (i = 0; i < y; i++) {
 duck1_left.x += 1;
 duck2_left.x += 1;
 duck3_left.x += 1;
 duck4_left.x += 1;
 duck1_right.x += 1;
 duck2_right.x += 1;
 duck3_right.x += 1;
 duck4_right.x += 1;
 duck1_left.y += 1;
 duck2_left.y += 1;
 duck3_left.y += 1;
 duck4_left.y += 1;
 duck1_right.y += 1;
 duck2_right.y += 1;
 duck3_right.y += 1;
 duck4_right.y += 1;

 chhar_spawn_duck(&duck1_right, &duck2_right, &duck3_right,
 &duck4_right);
 cursor_move();
 if (crash_detection() == b_true) {
 lives--;
 for (j = 0; j < 10000000; j++) {
 }
 if (lives < 1) {
 while (1)
 ;
 }
 reset_duck();
 }
 for (j = 0; j < 100000; j++) {
 }
 if (duck1_right.x > 600 || duck1_right.y > 320) {
 return;
 }

 }

 }

 }
 */

static void duck_move() {
	int i, j;
	unsigned int y;
	unsigned int b;

	direction = random_direction();

	if (direction == 0) {

		y = random();
		for (i = 0; i < y; i++) {
			duck1_left.y -= 1;
			duck2_left.y -= 1;
			duck3_left.y -= 1;
			duck4_left.y -= 1;
			duck1_left.x -= 1;
			duck2_left.x -= 1;
			duck3_left.x -= 1;
			duck4_left.x -= 1;

			duck1_right.y -= 1;
			duck2_right.y -= 1;
			duck3_right.y -= 1;
			duck4_right.y -= 1;
			duck1_right.x -= 1;
			duck2_right.x -= 1;
			duck3_right.x -= 1;
			duck4_right.x -= 1;
			cursor_move();
			chhar_spawn_duck(&duck1_left, &duck2_left, &duck3_left,
					&duck4_left);
			b = crash_detection();
			if (b == 1) {
				lives--;
				for (j = 0; j < 10000000; j++) {
				}
				if (lives < 1) {
					while (1)
						;
				}
				reset_duck();
			} else if (b == 2) {
				broj_promasaja++;
				for (j = 0; j < 100000; j++) {
							}
				if (broj_promasaja >= 3) {
					while (1)
						;
				}
			}

			for (j = 0; j < 100000; j++) {
			}
			if (duck1_left.x < 10 || duck1_left.y < 10) {
				return;
			}

		}

	} else if (direction == 1) {
		y = random();
		for (i = 0; i < y; i++) {
			duck1_left.y -= 1;
			duck2_left.y -= 1;
			duck3_left.y -= 1;
			duck4_left.y -= 1;
			duck1_right.y -= 1;
			duck2_right.y -= 1;
			duck3_right.y -= 1;
			duck4_right.y -= 1;
			chhar_spawn_duck(&duck1_left, &duck2_left, &duck3_left,
					&duck4_left);
			cursor_move();
			b = crash_detection();
			if (b == 1) {
				lives--;
				for (j = 0; j < 10000000; j++) {
				}
				if (lives < 1) {
					while (1)
						;
				}
				reset_duck();
			} else if (b == 2) {
				broj_promasaja++;
				for (j = 0; j < 100000; j++) {
							}
				if (broj_promasaja >= 3) {
					while (1)
						;
				}
			}
			for (j = 0; j < 100000; j++) {
			}
			if (duck1_left.y < 10) {
				return;
			}

		}

	} else if (direction == 2) {

		y = random();
		for (i = 0; i < y; i++) {
			duck1_left.y -= 1;
			duck2_left.y -= 1;
			duck3_left.y -= 1;
			duck4_left.y -= 1;
			duck1_right.y -= 1;
			duck2_right.y -= 1;
			duck3_right.y -= 1;
			duck4_right.y -= 1;

			duck1_left.x += 1;
			duck2_left.x += 1;
			duck3_left.x += 1;
			duck4_left.x += 1;
			duck1_right.x += 1;
			duck2_right.x += 1;
			duck3_right.x += 1;
			duck4_right.x += 1;
			chhar_spawn_duck(&duck1_right, &duck2_right, &duck3_right,
					&duck4_right);
			cursor_move();
			b = crash_detection();
			if (b == 1) {
				lives--;
				for (j = 0; j < 10000000; j++) {
				}
				if (lives < 1) {
					while (1)
						;
				}
				reset_duck();
			} else if (b == 2) {
				broj_promasaja++;
				for (j = 0; j < 100000; j++) {
							}
				if (broj_promasaja >= 3) {
					while (1)
						;
				}
			}
			for (j = 0; j < 100000; j++) {
			}
			if (duck1_right.x > 600 || duck1_right.y < 10) {
				return;
			}

		}

	} else if (direction == 3) {
		y = random();
		for (i = 0; i < y; i++) {
			duck1_right.x -= 1;
			duck2_right.x -= 1;
			duck3_right.x -= 1;
			duck4_right.x -= 1;
			duck1_left.x -= 1;
			duck2_left.x -= 1;
			duck3_left.x -= 1;
			duck4_left.x -= 1;

			chhar_spawn_duck(&duck1_left, &duck2_left, &duck3_left,
					&duck4_left);
			cursor_move();
			b = crash_detection();
			if (b == 1) {
				lives--;
				for (j = 0; j < 10000000; j++) {
				}
				if (lives < 1) {
					while (1)
						;
				}
				reset_duck();
			} else if (b == 2) {
				broj_promasaja++;
				for (j = 0; j < 100000; j++) {
							}
				if (broj_promasaja >= 3) {
					while (1)
						;
				}
			}
			for (j = 0; j < 100000; j++) {
			}
			if (duck1_left.x < 10) {
				return;
			}

		}

	} else if (direction == 4) {
		y = random();
		for (i = 0; i < y; i++) {
			duck1_left.x += 1;
			duck2_left.x += 1;
			duck3_left.x += 1;
			duck4_left.x += 1;
			duck1_right.x += 1;
			duck2_right.x += 1;
			duck3_right.x += 1;
			duck4_right.x += 1;

			chhar_spawn_duck(&duck1_right, &duck2_right, &duck3_right,
					&duck4_right);
			cursor_move();
			b = crash_detection();
			if (b == 1) {
				lives--;
				for (j = 0; j < 10000000; j++) {
				}
				if (lives < 1) {
					while (1)
						;
				}
				reset_duck();
			} else if (b == 2) {
				broj_promasaja++;
				for (j = 0; j < 100000; j++) {
							}
				if (broj_promasaja >= 3) {
					while (1)
						;
				}
			}
			for (j = 0; j < 100000; j++) {
			}

			if (duck1_right.x > 600) {
				return;
			}
		}

	} else if (direction == 5) {

		y = random();
		for (i = 0; i < y; i++) {
			duck1_right.x -= 1;
			duck2_right.x -= 1;
			duck3_right.x -= 1;
			duck4_right.x -= 1;
			duck1_left.x -= 1;
			duck2_left.x -= 1;
			duck3_left.x -= 1;
			duck4_left.x -= 1;
			duck1_left.y += 1;
			duck2_left.y += 1;
			duck3_left.y += 1;
			duck4_left.y += 1;
			duck1_right.y += 1;
			duck2_right.y += 1;
			duck3_right.y += 1;
			duck4_right.y += 1;

			chhar_spawn_duck(&duck1_left, &duck2_left, &duck3_left,
					&duck4_left);
			cursor_move();
			b = crash_detection();
			if (b == 1) {
				lives--;
				for (j = 0; j < 10000000; j++) {
				}
				if (lives < 1) {
					while (1)
						;
				}
				reset_duck();
			} else if (b == 2) {
				broj_promasaja++;
				for (j = 0; j < 100000; j++) {
							}
				if (broj_promasaja >= 3) {
					while (1)
						;
				}
			}
			for (j = 0; j < 100000; j++) {
			}
			if (duck1_right.x < 10 || duck1_right.y > 320) {
				return;
			}

		}

	} else if (direction == 6) {
		y = random();

		for (i = 0; i < y; i++) {
			duck1_left.y += 1;
			duck2_left.y += 1;
			duck3_left.y += 1;
			duck4_left.y += 1;
			duck1_right.y += 1;
			duck2_right.y += 1;
			duck3_right.y += 1;
			duck4_right.y += 1;

			chhar_spawn_duck(&duck1_left, &duck2_left, &duck3_left,
					&duck4_left);
			cursor_move();
			b = crash_detection();
			if (b == 1) {
				lives--;
				for (j = 0; j < 10000000; j++) {
				}
				if (lives < 1) {
					while (1)
						;
				}
				reset_duck();
			} else if (b == 2) {
				broj_promasaja++;
				for (j = 0; j < 100000; j++) {
							}
				if (broj_promasaja >= 3) {
					while (1)
						;
				}
			}
			for (j = 0; j < 100000; j++) {
			}
			if (duck1_right.y > 320) {
				return;
			}

		}

	} else if (direction == 7) {

		y = random();
		for (i = 0; i < y; i++) {
			duck1_left.x += 1;
			duck2_left.x += 1;
			duck3_left.x += 1;
			duck4_left.x += 1;
			duck1_right.x += 1;
			duck2_right.x += 1;
			duck3_right.x += 1;
			duck4_right.x += 1;
			duck1_left.y += 1;
			duck2_left.y += 1;
			duck3_left.y += 1;
			duck4_left.y += 1;
			duck1_right.y += 1;
			duck2_right.y += 1;
			duck3_right.y += 1;
			duck4_right.y += 1;

			chhar_spawn_duck(&duck1_right, &duck2_right, &duck3_right,
					&duck4_right);
			cursor_move();
			b = crash_detection();
			if (b == 1) {
				lives--;
				for (j = 0; j < 10000000; j++) {
				}
				if (lives < 1) {
					while (1)
						;
				}
				reset_duck();
			} else if (b == 2) {
				broj_promasaja++;
				for (j = 0; j < 100000; j++) {
							}
				if (broj_promasaja >= 3) {
					while (1)
						;
				}
			}
			for (j = 0; j < 100000; j++) {
			}
			if (duck1_right.x > 600 || duck1_right.y > 320) {
				return;
			}

		}

	}

}

static bool_t mario_move(unsigned char * map, characters * mario,
		direction_t dir, int start_jump) {
	unsigned int x;
	unsigned int y;
	int i, j;

	float Xx;
	float Yy;
	int roundX = 0;
	int roundY = 0;

	int obstackle = 0;

	if (mario->x > ((MAP_X + MAP_WIDTH) * 16 - 16)
			|| mario->y > (MAP_Y + MAP_HEIGHT) * 16 - 16) {
		return b_false;
	}

	x = mario->x;
	y = mario->y;

	if (dir == DIR_LEFT) {
		if (x > MAP_X * 16) {
			x--;
		}
	} else if (dir == DIR_RIGHT) {
		x++;
	} else if (dir == DIR_UP) {
		if (y > MAP_Y * 16) {
			for (i = 0; i < 30; i++) {
				y--;
				brojac++;

				mario->y = y;

				Xil_Out32(
						XPAR_BATTLE_CITY_PERIPH_0_BASEADDR + 4 * ( REGS_BASE_ADDRESS + mario->reg_h ),
						(mario->y << 16) | mario->x);
				for (j = 0; j < 100000; j++) {
				}
			}
		}
		while (brojac != 0) {
			y++;
			brojac--;
		}
	}
	if (start_jump == 1) {
		if (y > MAP_Y * 16) {
			for (i = 0; i < 30; i++) {
				y--;
				brojac++;
				if (dir == DIR_LEFT)
					x--;
				else
					x++;
				mario->x = x;
				mario->y = y;

				Xil_Out32(
						XPAR_BATTLE_CITY_PERIPH_0_BASEADDR + 4 * ( REGS_BASE_ADDRESS + mario->reg_h ),
						(mario->y << 16) | mario->x);
				for (j = 0; j < 100000; j++) {
				}
			}
		}
	}
	while (brojac != 0) {
		y++;
		brojac--;
	}

	Xx = x;
	Yy = y;

	if (dir == DIR_LEFT) {
		obstackle = obstackles_detection(x, y, mapPart, map, 2);
	} else if (dir == DIR_RIGHT) {
		obstackle = obstackles_detection(x, y, mapPart, map, 1);
	}

	roundX = floor(Xx / 16);
	roundY = floor(Yy / 16);

	switch (obstackle) {
	case 0: {
		udario_u_blok = 0;
	}
		break;
	case 2: {
		//blok
		if (dir == DIR_LEFT) {
			if (x > MAP_X * 16) {
				x++;
			}
		} else if (dir == DIR_RIGHT) {
			x--;
		}
		udario_u_blok = 1;
	}
		break;
	case 3: {
		//cigla

		if (dir == DIR_LEFT) {
			if (x > MAP_X * 16) {
				x++;
			}
		} else if (dir == DIR_RIGHT) {
			x--;
		}
		udario_u_blok = 1;
	}
		break;
	case 5: {
		//coin
		score++;
		map1[roundY + 1][roundX + 1] = 0;
		map_update(&mario);
	}
		break;
	default:
		udario_u_blok = 0;
	}

	mario->x = x;
	mario->y = y;

	Xil_Out32(
			XPAR_BATTLE_CITY_PERIPH_0_BASEADDR + 4 * ( REGS_BASE_ADDRESS + mario->reg_h ),
			(mario->y << 16) | mario->x);

	return b_false;
}

int obstackles_detection(int x, int y, int deoMape, unsigned char * map,
		int dir) {
	unsigned char mario_position_right;
	unsigned char mario_position_left;
	unsigned char mario_position_up;

	float Xx = x;
	float Yy = y;

	int roundX = 0;
	int roundY = 0;

	roundX = floor(Xx / 16);
	roundY = floor(Yy / 16);

	mario_position_right = map1[roundY + 1][roundX + 1];
	mario_position_left = map1[roundY + 1][roundX];
	mario_position_up = map1[roundY + 1][roundX];

	if (dir == 1) {
		switch (mario_position_right) {
		case 0:
			return 0;
			break;
		case 1:
			return 1;
			break;
		case 2:
			return 2;
			break;
		case 3:
			return 3;
			break;
		case 4:
			return 4;
			break;
		case 5:
			return 5;
			break;

		}
	} else if (dir == 2) {
		switch (mario_position_left) {
		case 0:
			return 0;
			break;
		case 1:
			return 1;
			break;
		case 2:
			return 2;
			break;
		case 3:
			return 3;
			break;
		case 4:
			return 4;
			break;
		case 5:
			return 5;
			break;

		}
	} else if (dir == 3) {
		switch (mario_position_up) {
		case 0:
			return 0;
			break;
		case 1:
			return 1;
			break;
		case 2:
			return 2;
			break;
		case 3:
			return 3;
			break;
		case 4:
			return 4;
			break;
		case 5:
			return 5;
			break;

		}
	}

}

void battle_city() {

	unsigned int buttons, tmpBtn = 0, tmpUp = 0;
	int i, change = 0, jumpFlag = 0;
	int block;
	lives = 3;
	broj_promasaja = 0;

	map_reset(map1);
	map_update(&mario);

	//chhar_spawn(&enemie1);
	//chhar_spawn(&enemie2);
	//chhar_spawn(&enemie3);
	//chhar_spawn(&enemie4);

	chhar_spawn(&cursor);
	chhar_spawn_duck(&duck1_right, &duck2_right, &duck3_right, &duck4_right);

	while (1) {
		duck_move();
		//map_update(&mario);
		//while(1);
	}

	while (1) {

		//mario_move(map1, &mario, d, start_jump);
		duck_move();

		map_update(&mario);

		for (i = 0; i < 100000; i++) {
		}

	}
}
